# ******************************************************************************************
# FileName     : SmartLabOn_Sample.py
# Description  : 지능형 과학실 ON 샘플 소스 코드
# Author       : 박은정
# Created Date : 2025.02.20 : 박은정
# Reference    :
# ******************************************************************************************


#===========================================================================================
# 기본 모듈 사용하기
#===========================================================================================
import time
import math
from machine import ADC, Pin
from ETboard.lib.pin_define import *                     # ETboard 핀 관련 모듈


#===========================================================================================
# IoT 프로그램 사용하기
#===========================================================================================
from ET_IoT_App import ET_IoT_App, setup, loop
app = ET_IoT_App()


#===========================================================================================
# 전역 변수 선언
#===========================================================================================
photo_sensor = ADC(Pin(A1))                              # 조도 센서 핀: A1
temp_sensor = ADC(Pin(A2))                               # 온도 센서 핀: A2

temp = 0
photo = 0

R1 = 10000
c1 = 1.009249522e-03
c2 = 2.378405444e-04
c3 = 2.019202697e-07


#===========================================================================================
def et_setup():                                          #  사용자 맞춤형 설정
#===========================================================================================
    photo_sensor.atten(ADC.ATTN_11DB)                    # 최대 전압 범위 설정 (0-3.3V)
    temp_sensor.atten(ADC.ATTN_11DB)                     # 최대 전압 범위 설정 (0-3.3V)

    recv_message()                                       # 메시지 수신


#===========================================================================================
def et_loop():                                           # 사용자 반복 처리
#===========================================================================================
    do_sensing_process()


#===========================================================================================
def resistance_to_lux(resistance):                       # CDS 값을 Lux로 변환하는 함수
#===========================================================================================
    # 예시로 간단한 변환 식을 사용
    lux = 500 / (resistance / 1000)
    return lux


#===========================================================================================
def do_sensing_process():                                # 센싱 처리
#===========================================================================================
    global temp, photo

    sensor_result = temp_sensor.read()                   # 온도 센서 값 저장

    # 아날로그 센서 값을 디지털 값으로 변환
    R2 = R1 * (4095.0 / sensor_result - 1.0)
    log_R2 = math.log(R2)
    T = (1.0 / (c1 + c2 * log_R2 + c3 * log_R2 * log_R2 * log_R2))
    temp = T - 273.15

    sensor_result = photo_sensor.read()                  # 조도 센서 값 저장

    # 전압 계산 (ESP32의 경우 3.3V가 최대)
    voltage = sensor_result * (3.3 / 4095.0)
    # 저항 계산 (기본 0.1kΩ 저항을 사용한다고 가정)
    resistance = (3.3 - voltage) * (1000) / voltage
    photo = resistance_to_lux(resistance)                  # 저항을 Lux로 변환

    time.sleep(1)  # 1초 대기


#===========================================================================================
def do_automatic_process():                              # 자동화 처리
#===========================================================================================
    pass


#===========================================================================================
def et_short_periodic_process():                         # 사용자 주기적 처리 (예 : 1초마다)
#===========================================================================================
    pass


#===========================================================================================
def et_long_periodic_process():                          # 사용자 주기적 처리 (예 : 5초마다)
#===========================================================================================
    send_message()                                       # 메시지 송신


#===========================================================================================
def send_message():                                      # 메시지 송신
#===========================================================================================
    global temp, photo
    app.add_sensor_data("temp", temp)
    app.add_sensor_data("photo", photo)
    app.send_sensor_data()


#===========================================================================================
def recv_message():                                      # 메시지 수신
#===========================================================================================
    # "get_sensor_type" 메시지를 받으면 send_sensor_type() 실행
    app.setup_recv_message('get_sensor_type', handle_get_sensor_type_request)


#===========================================================================================
def json_to_unicode_escaped(data):                       # 직렬화, 이스케이프
#===========================================================================================
    # JSON 직렬화
    json_string = ujson.dumps(data)

    # JSON 문자열에서 비-ASCII 문자를 Unicode 이스케이프 형식으로 변환
    return ''.join(f'\\u{ord(c):04x}' if ord(c) > 127 else c for c in json_string)


#===========================================================================================
def handle_get_sensor_type_request(topic, msg):          # 센서 타입 송신 처리
#===========================================================================================
    send_sensor_type()


#===========================================================================================
def send_sensor_type():                                  # 센서 타입 전송
#===========================================================================================
    sensor_type = {
        "sensorId": "temp",
        "sensorType": "temp",
        "sensorNicNm": "온도",
        "channelCode": "01",
        "collectUnit": "°C",
    }
    payload = json_to_unicode_escaped(sensor_type)
    app.send_data("sensor_types", "temp", payload)

    sensor_type = {
        "sensorId": "photo",
        "sensorType": "photo",
        "sensorNicNm": "조도",
        "channelCode": "01",
        "collectUnit": "lux",
    }
    payload = json_to_unicode_escaped(sensor_type)
    app.send_data("sensor_types", "photo", payload)


#===========================================================================================
# 시작 지점                     
#===========================================================================================
if __name__ == '__main__':
    setup(app, et_setup)
    while True:
        loop(app, et_loop, et_short_periodic_process, et_long_periodic_process)


#===========================================================================================
#                                                    
# (주)한국공학기술연구원 http://et.ketri.re.kr       
#
#=========================================================================================== 